#!/bin/bash

# Test de Performance para VR Distribuci√≥n
# Verifica las optimizaciones implementadas para resolver recursos bloqueantes

echo "üöÄ Iniciando test de performance para VR Distribuci√≥n..."
echo "======================================================"

# Funci√≥n para verificar recursos cr√≠ticos inline
check_inline_css() {
    echo "üì¶ Verificando CSS cr√≠tico inline..."
    
    if grep -q "Critical CSS.*Above-the-fold optimized for LCP" index.html; then
        echo "‚úÖ CSS cr√≠tico inline detectado en index.html"
        inline_size=$(grep -A 50 "Critical CSS" index.html | wc -c)
        echo "   Tama√±o CSS inline: ${inline_size} caracteres"
    else
        echo "‚ùå CSS cr√≠tico inline NO encontrado en index.html"
    fi
    
    if grep -q "Critical CSS.*Gallery Optimized for LCP" gallery/index.html; then
        echo "‚úÖ CSS cr√≠tico inline detectado en gallery/index.html"
        gallery_inline_size=$(grep -A 50 "Critical CSS" gallery/index.html | wc -c)
        echo "   Tama√±o CSS inline galer√≠a: ${gallery_inline_size} caracteres"
    else
        echo "‚ùå CSS cr√≠tico inline NO encontrado en gallery/index.html"
    fi
}

# Funci√≥n para verificar carga as√≠ncrona de fuentes
check_async_fonts() {
    echo ""
    echo "üî§ Verificando carga as√≠ncrona de fuentes..."
    
    if grep -q "Load Google Fonts Asynchronously" index.html; then
        echo "‚úÖ Fuentes Google cargando de forma as√≠ncrona en index.html"
    else
        echo "‚ùå Fuentes Google NO est√°n cargando as√≠ncronamente en index.html"
    fi
    
    if grep -q "Load Material Icons Asynchronously" index.html; then
        echo "‚úÖ Material Icons cargando de forma as√≠ncrona en index.html"
    else
        echo "‚ùå Material Icons NO est√°n cargando as√≠ncronamente en index.html"
    fi
    
    if grep -q "Load Google Fonts Asynchronously" gallery/index.html; then
        echo "‚úÖ Fuentes Google cargando de forma as√≠ncrona en gallery/index.html"
    else
        echo "‚ùå Fuentes Google NO est√°n cargando as√≠ncronamente en gallery/index.html"
    fi
}

# Funci√≥n para verificar preload de fuentes cr√≠ticas
check_font_preload() {
    echo ""
    echo "‚ö° Verificando preload de fuentes cr√≠ticas..."
    
    if grep -q "preload.*roboto.*woff2" index.html; then
        echo "‚úÖ Preload de fuentes cr√≠ticas configurado en index.html"
        preload_count=$(grep -c "preload.*font" index.html)
        echo "   Fuentes preload: ${preload_count}"
    else
        echo "‚ùå Preload de fuentes cr√≠ticas NO configurado en index.html"
    fi
    
    if grep -q "preload.*roboto.*woff2" gallery/index.html; then
        echo "‚úÖ Preload de fuentes cr√≠ticas configurado en gallery/index.html"
        gallery_preload_count=$(grep -c "preload.*font" gallery/index.html)
        echo "   Fuentes preload galer√≠a: ${gallery_preload_count}"
    else
        echo "‚ùå Preload de fuentes cr√≠ticas NO configurado en gallery/index.html"
    fi
}

# Funci√≥n para verificar carga as√≠ncrona de CSS
check_async_css() {
    echo ""
    echo "üé® Verificando carga as√≠ncrona de CSS..."
    
    if grep -q "Load Non-Critical CSS Asynchronously" index.html; then
        echo "‚úÖ CSS no cr√≠tico cargando de forma as√≠ncrona en index.html"
        css_async_count=$(grep -c "loadCSS.*amazonaws" index.html)
        echo "   Archivos CSS as√≠ncronos: ${css_async_count}"
    else
        echo "‚ùå CSS no cr√≠tico NO est√° cargando as√≠ncronamente en index.html"
    fi
    
    if grep -q "Load Non-Critical CSS Asynchronously" gallery/index.html; then
        echo "‚úÖ CSS no cr√≠tico cargando de forma as√≠ncrona en gallery/index.html"
        gallery_css_async_count=$(grep -c "loadCSS.*amazonaws" gallery/index.html)
        echo "   Archivos CSS as√≠ncronos galer√≠a: ${gallery_css_async_count}"
    else
        echo "‚ùå CSS no cr√≠tico NO est√° cargando as√≠ncronamente en gallery/index.html"
    fi
}

# Funci√≥n para verificar Resource Hints
check_resource_hints() {
    echo ""
    echo "üîó Verificando Resource Hints..."
    
    if grep -q "preconnect.*fonts.googleapis.com" index.html; then
        echo "‚úÖ Preconnect a Google Fonts configurado en index.html"
    else
        echo "‚ùå Preconnect a Google Fonts NO configurado en index.html"
    fi
    
    if grep -q "preconnect.*amazonaws.com" index.html; then
        echo "‚úÖ Preconnect a AWS S3 configurado en index.html"
    else
        echo "‚ùå Preconnect a AWS S3 NO configurado en index.html"
    fi
    
    preconnect_count=$(grep -c "preconnect" index.html)
    echo "   Total preconnects: ${preconnect_count}"
}

# Funci√≥n para verificar Service Worker optimizado
check_service_worker() {
    echo ""
    echo "‚öôÔ∏è Verificando Service Worker optimizado..."
    
    if grep -q "Service Worker.*v3.0.*Performance Optimizations" service-worker.js; then
        echo "‚úÖ Service Worker v3.0 con optimizaciones de performance"
    else
        echo "‚ùå Service Worker NO est√° optimizado para v3.0"
    fi
    
    if grep -q "fontCacheStrategy" service-worker.js; then
        echo "‚úÖ Estrategia de cache para fuentes implementada"
    else
        echo "‚ùå Estrategia de cache para fuentes NO implementada"
    fi
    
    if grep -q "aggressiveCacheStrategy" service-worker.js; then
        echo "‚úÖ Estrategia de cache agresivo implementada"
    else
        echo "‚ùå Estrategia de cache agresivo NO implementada"
    fi
}

# Funci√≥n para verificar fallbacks
check_fallbacks() {
    echo ""
    echo "üîÑ Verificando fallbacks para navegadores sin JavaScript..."
    
    if grep -q "<noscript>" index.html; then
        echo "‚úÖ Fallbacks noscript configurados en index.html"
        noscript_links=$(grep -A 10 "<noscript>" index.html | grep -c "stylesheet")
        echo "   Enlaces CSS en noscript: ${noscript_links}"
    else
        echo "‚ùå Fallbacks noscript NO configurados en index.html"
    fi
    
    if grep -q "<noscript>" gallery/index.html; then
        echo "‚úÖ Fallbacks noscript configurados en gallery/index.html"
        gallery_noscript_links=$(grep -A 10 "<noscript>" gallery/index.html | grep -c "stylesheet")
        echo "   Enlaces CSS en noscript galer√≠a: ${gallery_noscript_links}"
    else
        echo "‚ùå Fallbacks noscript NO configurados en gallery/index.html"
    fi
}

# Funci√≥n para verificar filtros mobile optimizados
check_mobile_filters() {
    echo ""
    echo "üì± Verificando optimizaciones mobile para filtros de galer√≠a..."
    
    if grep -q "grid-template-columns: 1fr 1fr" gallery/index.html || 
       grep -q "grid-template-columns: 1fr 1fr" static/gallery/css/enhanced-gallery-visual.css 2>/dev/null; then
        echo "‚úÖ Filtros de galer√≠a optimizados para mobile (2 columnas)"
    else
        echo "‚ùå Filtros de galer√≠a NO optimizados para mobile"
    fi
}

# Funci√≥n para generar reporte de tama√±os
generate_size_report() {
    echo ""
    echo "üìä Reporte de Tama√±os de Archivos:"
    echo "=================================="
    
    if [ -f "index.html" ]; then
        index_size=$(wc -c < index.html)
        echo "üìÑ index.html: ${index_size} bytes"
    fi
    
    if [ -f "gallery/index.html" ]; then
        gallery_size=$(wc -c < gallery/index.html)
        echo "üìÑ gallery/index.html: ${gallery_size} bytes"
    fi
    
    if [ -f "service-worker.js" ]; then
        sw_size=$(wc -c < service-worker.js)
        echo "üìÑ service-worker.js: ${sw_size} bytes"
    fi
}

# Funci√≥n para verificar optimizaciones de performance
check_performance_optimizations() {
    echo ""
    echo "üèéÔ∏è Verificando optimizaciones espec√≠ficas de performance..."
    
    # Verificar will-change properties
    if grep -q "will-change" index.html; then
        echo "‚úÖ Propiedades will-change para optimizaci√≥n GPU"
    else
        echo "‚ùå Propiedades will-change NO configuradas"
    fi
    
    # Verificar font-display
    if grep -q "display=swap" index.html; then
        echo "‚úÖ font-display: swap configurado"
    else
        echo "‚ùå font-display: swap NO configurado"
    fi
    
    # Verificar resource hints cr√≠ticos
    if grep -q "dns-prefetch" index.html; then
        echo "‚úÖ DNS prefetch configurado"
    else
        echo "‚ùå DNS prefetch NO configurado"
    fi
}

# Ejecutar todas las verificaciones
main() {
    check_inline_css
    check_async_fonts
    check_font_preload
    check_async_css
    check_resource_hints
    check_service_worker
    check_fallbacks
    check_mobile_filters
    check_performance_optimizations
    generate_size_report
    
    echo ""
    echo "======================================================"
    echo "üéØ Test de performance completado"
    echo ""
    echo "üìà Beneficios esperados:"
    echo "   ‚Ä¢ Eliminaci√≥n de recursos bloqueantes CSS"
    echo "   ‚Ä¢ Eliminaci√≥n de recursos bloqueantes de fuentes"
    echo "   ‚Ä¢ Reducci√≥n del LCP (Largest Contentful Paint)"
    echo "   ‚Ä¢ Mejora en Core Web Vitals"
    echo "   ‚Ä¢ Cache agresivo de recursos est√°ticos"
    echo "   ‚Ä¢ Filtros de galer√≠a optimizados para mobile"
    echo ""
    echo "üîç Para mejores resultados:"
    echo "   ‚Ä¢ Ejecuta Lighthouse para verificar m√©tricas"
    echo "   ‚Ä¢ Prueba en PageSpeed Insights"
    echo "   ‚Ä¢ Verifica Core Web Vitals en producci√≥n"
    echo ""
}

# Ejecutar el script
main
