# VR Distribuci√≥n - Nginx Security Configuration
# Add this to your nginx server block

# Content Security Policy
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com https://vrdistribucion.s3-accelerate.amazonaws.com https://wa.me data:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://vrdistribucion.s3-accelerate.amazonaws.com; font-src 'self' https://fonts.gstatic.com https://vrdistribucion.s3-accelerate.amazonaws.com data:; img-src 'self' https://vrdistribucion.s3-accelerate.amazonaws.com https://www.google-analytics.com https://www.googletagmanager.com data: blob:; media-src 'self' https://vrdistribucion.s3-accelerate.amazonaws.com blob:; connect-src 'self' https://www.google-analytics.com https://www.googletagmanager.com https://region1.google-analytics.com https://analytics.google.com https://vrdistribucion.s3-accelerate.amazonaws.com https://api.whatsapp.com https://wa.me wss://wa.me; frame-src 'self' https://www.google.com https://www.youtube.com https://player.vimeo.com; object-src 'none'; base-uri 'self'; form-action 'self' https://vrdistribucion.s3-accelerate.amazonaws.com https://wa.me; upgrade-insecure-requests; block-all-mixed-content;" always;

# HTTP Strict Transport Security (HSTS)
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# X-Frame-Options
add_header X-Frame-Options "SAMEORIGIN" always;

# X-Content-Type-Options
add_header X-Content-Type-Options "nosniff" always;

# X-XSS-Protection
add_header X-XSS-Protection "1; mode=block" always;

# Referrer Policy
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Permissions Policy
add_header Permissions-Policy "camera=(), microphone=(), geolocation=(self), payment=(), usb=(), accelerometer=(), gyroscope=(), magnetometer=(), fullscreen=(self), autoplay=(self)" always;

# Hide server information
server_tokens off;

# Force HTTPS redirect
if ($scheme != "https") {
    return 301 https://$host$request_uri;
}

# Block access to sensitive files
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

location ~ \.(bak|config|dist|fla|inc|ini|log|psd|sh|sql|sw[op])$ {
    deny all;
    access_log off;
    log_not_found off;
}

# Cache configuration with security headers
location ~* \.(css|js)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header X-Content-Type-Options "nosniff" always;
}

location ~* \.(png|jpg|jpeg|gif|svg|webp|avif)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header X-Content-Type-Options "nosniff" always;
}

location ~* \.(woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header X-Content-Type-Options "nosniff" always;
}

location ~* \.(mp4|webm)$ {
    expires 6M;
    add_header Cache-Control "public";
    add_header X-Content-Type-Options "nosniff" always;
}

location ~* \.html$ {
    expires 1h;
    add_header Cache-Control "public, must-revalidate";
    add_header X-Content-Type-Options "nosniff" always;
}
