from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import requests
import json
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
HTTP_REFERRER = "https://vrdistribucion.com"
X_TITLE = "VR Distribución Asistente IA"
MODEL = "mistralai/mistral-small-3.1-24b-instruct:free"

# Validate API key format
if not OPENROUTER_API_KEY or not OPENROUTER_API_KEY.startswith('sk-'):
    raise ValueError("Invalid or missing OPENROUTER_API_KEY. Must start with 'sk-'")

app = FastAPI()

if os.getenv('ENV') == 'development':
    print("development")
    cors_origins = ["http://127.0.0.1:8000", "https://vrdistribucion.com","*"]
else:
    print("production")
    cors_origins = ["https://vrdistribucion.com"]# Configure CORS with specific origins
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Templates
templates = Jinja2Templates(directory=".")

# System prompt template
SYSTEM_PROMPT = """Eres un asistente virtual especializado en proporcionar información sobre VR Distribución. Sigue estas reglas estrictamente:

1. Tu empresa es vrdistribucion.com.
2. Responde únicamente en español.
3. No uses markdown en tus respuestas.
4. Proporciona siempre los enlaces de nuestro sitio web utilizando la etiqueta <a href="url_ejemplo" target="_blank">.
5. La información que brindes debe estar relacionada con los servicios y productos de VR Distribución.
6. Basa tus respuestas ÚNICAMENTE en las siguientes fuentes:
   - https://vrdistribucion.com" # VR Distribución Sitio Principal
   - https://vrdistribucion.com/webdesigncancun/" # Diseño Web en Cancún y marketing digital
   - https://g.co/kgs/2AydBGG" # Horarios, teléfonos y direcciones<
7. Servicios principales sobre los que puedes informar:
   - Diseño de invitaciones y papelería
   - Centros de mesa y decoración
   - Marketing digital
   - Servicios de impresión
   - Diseño gráfico
8. Si te preguntan sobre temas que no estén dentro de estos servicios, redirige amablemente la conversación hacia las ofertas de VR Distribución.
9. Mantén un tono profesional pero amigable.
10. Mantén tus mensajes cortos y directos."""



@app.post("/api/chat")
async def chat(request: Request):
    try:
        # Parse request data
        data = await request.json()
        user_message = data.get('message', '').strip()

        # Validate user message
        if not user_message:
            return JSONResponse(
                status_code=400,
                content={"error": "El mensaje no puede estar vacío"}
            )

        conversation_history = data.get('conversation_history', [])

        # Prepare messages for the API
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT}
        ]

        # Add conversation history
        if conversation_history:
            messages.extend(conversation_history)

        # Add the current user message
        messages.append({"role": "user", "content": user_message})

        try:
            # Make request to OpenRouter API
            response = requests.post(
                url='https://openrouter.ai/api/v1/chat/completions',
                headers={
                    'Authorization': f'Bearer {OPENROUTER_API_KEY}',
                    'Content-Type': 'application/json',
                    'HTTP-Referer': HTTP_REFERRER,
                    'X-Title': X_TITLE,
                },
                json={
                    'model': MODEL,
                    'messages': messages,
                    'max_tokens': 950,
                    'temperature': 0.7,
                    'stream': False
                },
                timeout=30  # Add timeout
            )

            response.raise_for_status()  # Raise an exception for bad status codes

            # Parse the response
            response_data = response.json()

            # Extract the assistant's message
            assistant_message = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')

            if not assistant_message:
                raise ValueError("No response generated by the API")

            # Log successful interaction
            print(f"User: {user_message}")
            print(f"Assistant: {assistant_message}")

            return JSONResponse(content={"response": assistant_message})

        except requests.exceptions.Timeout:
            return JSONResponse(
                status_code=504,
                content={"error": "La solicitud ha excedido el tiempo de espera"}
            )
        except requests.exceptions.RequestException as e:
            return JSONResponse(
                status_code=502,
                content={"error": f"Error al comunicarse con el servicio: {str(e)}"}
            )
        except ValueError as e:
            return JSONResponse(
                status_code=500,
                content={"error": str(e)}
            )

    except json.JSONDecodeError:
        return JSONResponse(
            status_code=400,
            content={"error": "Formato de solicitud inválido"}
        )
    except Exception as e:
        print(f"Error inesperado: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"error": "Error interno del servidor"}
        )


# System prompt template
AGENT_SYSTEM_PROMPT = """Eres un asistente virtual especializado en proporcionar información sobre VR Distribución. Debes seguir estas reglas estrictamente:

0. Tu empresa es VR Distribución.
1. Responde únicamente en español.
2. Proporciona información exclusivamente relacionada con los servicios y productos de VR Distribución.
3. La información debe provenir ÚNICAMENTE de:
   - https://vrdistribucion.com # VR Distribución (Sitio Principal)</a>
   - https://vrdistribucion.com/webdesigncancun/ # Diseño Web en Cancún</a>
   - https://g.co/kgs/2AydBGG # Horarios, teléfonos y direcciones</a>
   - VR DISTRIBUCION
   - +52 998 236 1177

4. Principales servicios sobre los que puedes informar (con énfasis en marketing digital, web y agentes IA):
   - Marketing digital (estrategias, consultoría, campañas publicitarias, etc.)
   - Diseño web (sitios web, optimización, SEO)
   - Manejo de redes sociales
   - Branding y diseño gráfico
   - Publicidad y contenido
   - Agentes IA (soluciones conversacionales, automatización, etc.)

5. Si se pregunta sobre algo fuera de estos temas, redirige amablemente la conversación a los servicios de VR Distribución relacionados con marketing digital, diseño web o agentes IA.

6. Mantén un tono profesional pero amigable.

7. Mantén tus mensajes cortos y directos.

8. Proporciona siempre los enlaces utilizando la etiqueta HTML <a>."""

HTTP_REFERRER = "https://vrdistribucion.com"
X_TITLE = "VR Distribución marketing digital Asistente IA"


@app.post("/api/marketing/chat")
async def chat_ia(request: Request):
    try:
        # Parse request data
        data = await request.json()
        user_message = data.get('message', '').strip()

        # Validate user message
        if not user_message:
            return JSONResponse(
                status_code=400,
                content={"error": "El mensaje no puede estar vacío"}
            )

        conversation_history = data.get('conversation_history', [])

        # Prepare messages for the API
        messages = [
            {"role": "system", "content": AGENT_SYSTEM_PROMPT}
        ]

        # Add conversation history
        if conversation_history:
            messages.extend(conversation_history)

        # Add the current user message
        messages.append({"role": "user", "content": user_message})

        try:
            # Make request to OpenRouter API
            response = requests.post(
                url='https://openrouter.ai/api/v1/chat/completions',
                headers={
                    'Authorization': f'Bearer {OPENROUTER_API_KEY}',
                    'Content-Type': 'application/json'

                },
                json={
                    'model': MODEL,
                    'messages': messages,
                    'max_tokens': 950,
                    'temperature': 0.7,
                    'stream': False
                },
                timeout=30  # Add timeout
            )

            response.raise_for_status()  # Raise an exception for bad status codes

            # Parse the response
            response_data = response.json()

            # Extract the assistant's message
            assistant_message = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')

            if not assistant_message:
                raise ValueError("No response generated by the API")

            # Log successful interaction
            print(f"User: {user_message}")
            print(f"Assistant: {assistant_message}")

            return JSONResponse(content={"response": assistant_message})

        except requests.exceptions.Timeout:
            return JSONResponse(
                status_code=504,
                content={"error": "La solicitud ha excedido el tiempo de espera"}
            )
        except requests.exceptions.RequestException as e:
            return JSONResponse(
                status_code=502,
                content={"error": f"Error al comunicarse con el servicio: {str(e)}"}
            )
        except ValueError as e:
            return JSONResponse(
                status_code=500,
                content={"error": str(e)}
            )

    except json.JSONDecodeError:
        return JSONResponse(
            status_code=400,
            content={"error": "Formato de solicitud inválido"}
        )
    except Exception as e:
        print(f"Error inesperado: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"error": "Error interno del servidor"}
        )


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="127.0.0.1", port=8000, reload=True)